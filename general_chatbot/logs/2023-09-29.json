{
    "0": {
        "T: ": "2023-09-29 18:35:10",
        "Q: ": "Este es un ejemplo",
        "A: ": "Debe ser eliminado"
    },
    "1": {
        "T": "2023-09-29 18:35:15",
        "Q": "Hola",
        "A": "¡Hola! ¿En qué puedo ayudarte hoy?"
    },
    "2": {
        "T": "2023-09-29 18:35:32",
        "Q": "Esto es una prueba de concepto, sabes que significa?",
        "A": "Sí, una prueba de concepto es un término utilizado en el desarrollo de productos o proyectos para demostrar la viabilidad y practicidad de una idea o concepto. Por lo general, implica la creación de un prototipo o modelo que se utiliza para evaluar la funcionalidad y la eficacia del concepto antes de invertir tiempo y recursos en su desarrollo completo. ¿Necesitas ayuda con algo relacionado con una prueba de concepto en particular?"
    },
    "3": {
        "T": "2023-09-29 18:36:37",
        "Q": "me puedes decir como puedo crear una base de datos usando sqlite3 y python en una Mac?",
        "A": "¡Por supuesto! Aquí te dejo los pasos para crear una base de datos SQLite utilizando Python en una Mac:\n\n1. Abre la terminal en tu Mac.\n\n2. Instala SQLite3 si aún no lo has hecho. Puedes hacerlo con el siguiente comando:\n\n```\nbrew install sqlite3\n```\n\n3. Abre un editor de texto como Sublime Text o Visual Studio Code.\n\n4. Crea un nuevo archivo de Python y guarda el archivo con un nombre que desees, por ejemplo, \"crear_db.py\".\n\n5. Importa la librería SQLite3 en el archivo de Python:\n\n```python\nimport sqlite3\n```\n\n6. Crea una conexión a la base de datos SQLite utilizando el siguiente código:\n\n```python\nconn = sqlite3.connect('nombre_de_tu_base_de_datos.db')\n```\n\n7. Crea un cursor para la conexión:\n\n```python\ncursor = conn.cursor()\n```\n\n8. Crea una tabla en la base de datos utilizando el siguiente código:\n\n```python\ncursor.execute('''CREATE TABLE nombre_de_tu_tabla\n               (id INTEGER PRIMARY KEY, nombre TEXT, apellido TEXT)''')\n```\n\n9. Guarda los cambios en la base de datos y cierra la conexión:\n\n```python\nconn.commit()\nconn.close()\n```\n\nCon estos pasos, habrás creado una base de datos SQLite utilizando Python en tu Mac. Si necesitas agregar datos a la tabla o realizar otras operaciones, puedes hacerlo utilizando los comandos de SQLite3 en Python."
    },
    "4": {
        "T": "2023-09-29 18:37:36",
        "Q": "y si quiero guarde la fecha de sistema de forma automatica?",
        "A": "Para guardar la fecha del sistema de forma automática en la base de datos SQLite, puedes utilizar la función `date()` del módulo `datetime` de Python. Aquí te dejo un ejemplo de cómo hacerlo:\n\n```python\nimport sqlite3\nfrom datetime import date\n\n# Conectarse a la base de datos\nconn = sqlite3.connect('nombre_de_tu_base_de_datos.db')\n\n# Crear un cursor para la conexión\ncursor = conn.cursor()\n\n# Crear una tabla con una columna para la fecha\ncursor.execute('''CREATE TABLE nombre_de_tu_tabla\n               (id INTEGER PRIMARY KEY, fecha DATE, nombre TEXT, apellido TEXT)''')\n\n# Insertar datos en la tabla, incluyendo la fecha actual del sistema\nhoy = date.today()\nnombre = 'Juan'\napellido = 'Pérez'\ncursor.execute(\"INSERT INTO nombre_de_tu_tabla (fecha, nombre, apellido) VALUES (?, ?, ?)\", (hoy, nombre, apellido))\n\n# Guardar los cambios en la base de datos y cerrar la conexión\nconn.commit()\nconn.close()\n```\n\nEn este ejemplo, se utiliza la función `date.today()` del módulo `datetime` para obtener la fecha actual del sistema y se inserta en la tabla junto con los otros datos. La columna `fecha` se define como tipo `DATE` al crear la tabla."
    },
    "5": {
        "T": "2023-09-29 18:38:47",
        "Q": "como creo una tabla en sqlite3 que tenga los campos pregunta, respuesta, rating, fecha de sistema y un id que se autoincremente?",
        "A": "Para crear una tabla en SQLite3 con los campos `pregunta`, `respuesta`, `rating`, `fecha de sistema` y un `id` que se autoincremente, puedes utilizar el siguiente código:\n\n```python\nimport sqlite3\nfrom datetime import datetime\n\n# Conectarse a la base de datos\nconn = sqlite3.connect('nombre_de_tu_base_de_datos.db')\n\n# Crear un cursor para la conexión\ncursor = conn.cursor()\n\n# Crear una tabla con los campos requeridos\ncursor.execute('''CREATE TABLE nombre_de_tu_tabla\n               (id INTEGER PRIMARY KEY AUTOINCREMENT, pregunta TEXT, respuesta TEXT, rating INTEGER, fecha_sistema DATE)''')\n\n# Insertar datos en la tabla, incluyendo la fecha actual del sistema\npregunta = '¿Cómo se crea una tabla en SQLite3?'\nrespuesta = 'Se puede crear una tabla en SQLite3 utilizando el lenguaje SQL.'\nrating = 4\nfecha_sistema = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\ncursor.execute(\"INSERT INTO nombre_de_tu_tabla (pregunta, respuesta, rating, fecha_sistema) VALUES (?, ?, ?, ?)\", (pregunta, respuesta, rating, fecha_sistema))\n\n# Guardar los cambios en la base de datos y cerrar la conexión\nconn.commit()\nconn.close()\n```\n\nEn este ejemplo, se utiliza el tipo de dato `DATE` para la columna `fecha_sistema` y se utiliza la función `datetime.now().strftime('%Y-%m-%d %H:%M:%S')` para obtener la fecha y hora actual del sistema en formato `YYYY-MM-DD HH:MM:SS`. También se utiliza el tipo de dato `INTEGER PRIMARY KEY AUTOINCREMENT` para la columna `id`, lo que permite que el valor se autoincremente automáticamente cada vez que se inserta una nueva fila en la tabla."
    },
    "6": {
        "T": "2023-09-29 18:40:00",
        "Q": "como hago que en sqlite3 se tenga una columna fecha de sistema que se llene automáticamente con la fecha de la computadora",
        "A": "Para agregar una columna de fecha de sistema en SQLite3 que se llene automáticamente con la fecha de la computadora, puedes utilizar la función `datetime('now')` en la declaración `INSERT` para insertar la fecha y hora actuales en la columna correspondiente. A continuación, te muestro un ejemplo de cómo hacerlo:\n\n```python\nimport sqlite3\n\n# Conectarse a la base de datos\nconn = sqlite3.connect('nombre_de_tu_base_de_datos.db')\n\n# Crear un cursor para la conexión\ncursor = conn.cursor()\n\n# Crear una tabla con una columna para la fecha de sistema\ncursor.execute('''CREATE TABLE nombre_de_tu_tabla\n               (id INTEGER PRIMARY KEY, nombre TEXT, apellido TEXT, fecha_sistema DATE DEFAULT (datetime('now')))''')\n\n# Insertar datos en la tabla, incluyendo la fecha actual del sistema\nnombre = 'Juan'\napellido = 'Pérez'\ncursor.execute(\"INSERT INTO nombre_de_tu_tabla (nombre, apellido) VALUES (?, ?)\", (nombre, apellido))\n\n# Guardar los cambios en la base de datos y cerrar la conexión\nconn.commit()\nconn.close()\n```\n\nEn este ejemplo, se utiliza la cláusula `DEFAULT` para establecer la columna `fecha_sistema` con la función `datetime('now')`, lo que significa que se insertará automáticamente la fecha y hora actuales en la columna cada vez que se inserte una nueva fila en la tabla."
    },
    "7": {
        "T": "2023-09-29 18:40:18",
        "Q": "utilizando solo lenguaje de sqlite3",
        "A": "¡Claro! Puedes utilizar la función `date('now')` de SQLite3 para insertar la fecha actual del sistema en una columna de fecha de sistema en una tabla. Aquí te muestro un ejemplo de cómo hacerlo:\n\n```sql\n-- Crear una tabla con una columna para la fecha de sistema\nCREATE TABLE nombre_de_tu_tabla (\n  id INTEGER PRIMARY KEY,\n  nombre TEXT,\n  apellido TEXT,\n  fecha_sistema DATE DEFAULT (date('now'))\n);\n\n-- Insertar datos en la tabla, incluyendo la fecha actual del sistema\nINSERT INTO nombre_de_tu_tabla (nombre, apellido) VALUES ('Juan', 'Pérez');\n```\n\nEn este ejemplo, se utiliza la cláusula `DEFAULT` para establecer la columna `fecha_sistema` con la función `date('now')`, lo que significa que se insertará automáticamente la fecha actual del sistema en la columna cada vez que se inserte una nueva fila en la tabla."
    },
    "8": {
        "T": "2023-09-29 18:40:59",
        "Q": "Como le hago para poner un botón de me gusta o disgusta en streamlite después de cada respuesta",
        "A": "Para agregar botones de \"Me gusta\" y \"No me gusta\" a una aplicación de Streamlit después de cada respuesta, puedes utilizar los componentes `st.button` y `st.write` de Streamlit. Aquí te muestro un ejemplo de cómo hacerlo:\n\n```python\nimport streamlit as st\nimport sqlite3\n\n# Conectarse a la base de datos\nconn = sqlite3.connect('nombre_de_tu_base_de_datos.db')\n\n# Crear un cursor para la conexión\ncursor = conn.cursor()\n\n# Obtener las respuestas de la base de datos\ncursor.execute(\"SELECT id, respuesta, rating FROM nombre_de_tu_tabla\")\nrespuestas = cursor.fetchall()\n\n# Mostrar las respuestas y los botones de \"Me gusta\" y \"No me gusta\"\nfor respuesta in respuestas:\n    st.write(respuesta[1])\n    if st.button('Me gusta'):\n        cursor.execute(\"UPDATE nombre_de_tu_tabla SET rating = ? WHERE id = ?\", (respuesta[2] + 1, respuesta[0]))\n        conn.commit()\n    if st.button('No me gusta'):\n        cursor.execute(\"UPDATE nombre_de_tu_tabla SET rating = ? WHERE id = ?\", (respuesta[2] - 1, respuesta[0]))\n        conn.commit()\n\n# Cerrar la conexión a la base de datos\nconn.close()\n```\n\nEn este ejemplo, se utiliza el componente `st.write` para mostrar cada respuesta en la pantalla y los componentes `st.button` para agregar los botones de \"Me gusta\" y \"No me gusta\". Cuando se presiona uno de los botones, se actualiza el valor de la columna `rating` en la base de datos para la respuesta correspondiente utilizando una declaración `UPDATE`."
    },
    "9": {
        "T": "2023-09-29 18:43:33",
        "Q": "Cuales son loa planetas del sistema solar ordenados alfabéticamente y en una lista?",
        "A": "¡Claro! Aquí te dejo la lista de los planetas del sistema solar en orden alfabético:\n\n- Júpiter\n- Marte\n- Mercurio\n- Neptuno\n- Saturno\n- Tierra\n- Urano\n- Venus"
    },
    "10": {
        "T": "2023-09-29 18:45:57",
        "Q": "Como le hago para poner un pulgar arriba y pulgar abajo en streamlit después de cada respuesta?",
        "A": "Para agregar una opción de pulgar arriba y pulgar abajo en Streamlit, puedes utilizar los componentes de botón de Streamlit y agregar una función para cada botón. Aquí te dejo un ejemplo de cómo podrías implementarlo:\n\n```python\nimport streamlit as st\n\n# Función para el botón de pulgar arriba\ndef thumbs_up():\n    st.write(\"👍\")\n\n# Función para el botón de pulgar abajo\ndef thumbs_down():\n    st.write(\"👎\")\n\n# Agregar los botones a la interfaz\nst.write(\"¿Te gustó la respuesta?\")\nst.button(\"👍\", on_click=thumbs_up)\nst.button(\"👎\", on_click=thumbs_down)\n```\n\nEn este ejemplo, se crean dos funciones para cada botón (`thumbs_up` y `thumbs_down`) que imprimen el emoji correspondiente en la pantalla. Luego, se agregan los botones a la interfaz utilizando el método `button` de Streamlit y se les asigna la función correspondiente como parámetro `on_click`. De esta manera, cuando se hace clic en el botón, se ejecuta la función correspondiente."
    },
    "11": {
        "T": "2023-09-29 18:48:57",
        "Q": "Cuales son los planetas del sistema solar?",
        "A": "Los planetas del sistema solar son: Mercurio, Venus, Tierra, Marte, Júpiter, Saturno, Urano y Neptuno. Además, también hay planetas enanos como Plutón y Ceres."
    },
    "12": {
        "T": "2023-09-29 18:49:50",
        "Q": "Como le hago para volar?",
        "A": "Como humano, no es posible volar sin la ayuda de herramientas o tecnología. Sin embargo, si te interesa experimentar la sensación de volar, puedes probar deportes como el paracaidismo, el ala delta, el parapente o el vuelo en globo. También hay simuladores de vuelo que pueden darte una experiencia cercana a la realidad. En resumen, la mejor manera de volar es a través de la tecnología y los deportes especializados."
    },
    "13": {
        "T": "2023-09-29 18:50:32",
        "Q": "Como le hago para que los botones salgan al mismo nivel en streamlit después de cada pregunta?",
        "A": "Para que los botones salgan al mismo nivel en Streamlit después de cada pregunta, puedes utilizar la función `st.button` y agregar un parámetro `key` único para cada botón. De esta manera, Streamlit identificará cada botón de forma individual y los alineará correctamente. Aquí te dejo un ejemplo:\n\n```\nimport streamlit as st\n\nst.write(\"Pregunta 1\")\nst.button(\"Opción 1\", key=\"opcion1\")\nst.button(\"Opción 2\", key=\"opcion2\")\n\nst.write(\"Pregunta 2\")\nst.button(\"Opción 1\", key=\"opcion3\")\nst.button(\"Opción 2\", key=\"opcion4\")\n```\n\nEn este ejemplo, los botones de la pregunta 1 tienen las claves \"opcion1\" y \"opcion2\", mientras que los botones de la pregunta 2 tienen las claves \"opcion3\" y \"opcion4\". Al agregar estas claves únicas, los botones se alinearán correctamente en la página."
    },
    "14": {
        "T": "2023-09-29 18:51:13",
        "Q": "pero quiero que salgan uno junto al otro y no separados por un salto de linea",
        "A": "Para que los botones salgan uno junto al otro en Streamlit, puedes utilizar la función `st.beta_columns` para dividir la página en columnas y colocar los botones en columnas separadas. Aquí te dejo un ejemplo:\n\n```\nimport streamlit as st\n\ncol1, col2 = st.beta_columns(2)\n\nwith col1:\n    st.write(\"Pregunta 1\")\n    st.button(\"Opción 1\", key=\"opcion1\")\n    \nwith col2:\n    st.write(\"Pregunta 1\")\n    st.button(\"Opción 2\", key=\"opcion2\")\n```\n\nEn este ejemplo, se utiliza `st.beta_columns(2)` para dividir la página en dos columnas iguales. Luego, se usa `with col1` y `with col2` para especificar en qué columna se colocará cada botón. De esta manera, los botones se colocarán uno junto al otro en la página."
    },
    "15": {
        "T": "2023-09-29 18:52:13",
        "Q": "no resuelve mi problema, necesito que salgan justo después del texto uno junto al otro sin saltos de línea",
        "A": "Entiendo, para lograr que los botones salgan justo después del texto uno junto al otro sin saltos de línea en Streamlit, puedes utilizar la función `st.write` para escribir el texto y luego utilizar la función `st.button` para crear los botones, todo en la misma línea. Aquí te dejo un ejemplo:\n\n```\nimport streamlit as st\n\nst.write(\"Pregunta 1: \", st.button(\"Opción 1\", key=\"opcion1\"), st.button(\"Opción 2\", key=\"opcion2\"))\n```\n\nEn este ejemplo, se utiliza `st.write` para escribir el texto \"Pregunta 1: \" y los botones \"Opción 1\" y \"Opción 2\" en la misma línea. Al agregar los botones como argumentos de `st.write`, se colocarán uno junto al otro sin saltos de línea. También se utilizan las claves únicas \"opcion1\" y \"opcion2\" para cada botón, para asegurarse de que se alineen correctamente."
    },
    "16": {
        "T": "2023-09-29 18:56:14",
        "Q": "Dime los días de la semana en español, francés, aleman e ingles",
        "A": "Claro, aquí tienes los días de la semana en español, francés, alemán e inglés:\n\nEspañol: lunes, martes, miércoles, jueves, viernes, sábado, domingo.\nFrancés: lundi, mardi, mercredi, jeudi, vendredi, samedi, dimanche.\nAlemán: Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag.\nInglés: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday."
    },
    "17": {
        "T": "2023-09-29 18:56:34",
        "Q": "separalos",
        "A": "Por supuesto, aquí te los separo:\n\n- Español: lunes, martes, miércoles, jueves, viernes, sábado, domingo.\n- Francés: lundi, mardi, mercredi, jeudi, vendredi, samedi, dimanche.\n- Alemán: Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag.\n- Inglés: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday."
    },
    "18": {
        "T": "2023-09-29 18:57:11",
        "Q": "Dime cuando se utiliza la preposición on, at e in en ingles",
        "A": "La preposición \"on\" se utiliza para referirse a algo que está en contacto directo con una superficie o una línea, como por ejemplo \"on the table\" (en la mesa) o \"on the street\" (en la calle).\n\nLa preposición \"at\" se utiliza para referirse a un lugar específico, como por ejemplo \"at the park\" (en el parque) o \"at the airport\" (en el aeropuerto).\n\nLa preposición \"in\" se utiliza para referirse a algo que está dentro de un espacio, como por ejemplo \"in the room\" (en la habitación) o \"in the city\" (en la ciudad).\n\nEs importante tener en cuenta que estas preposiciones pueden tener diferentes usos y significados dependiendo del contexto en el que se utilicen."
    },
    "19": {
        "T": "2023-09-29 19:21:05",
        "Q": "Hola",
        "A": "¡Hola! ¿En qué puedo ayudarte hoy?"
    },
    "20": {
        "T": "2023-09-29 19:21:47",
        "Q": "Hola",
        "A": "¡Hola de nuevo! ¿En qué puedo ayudarte hoy?"
    },
    "21": {
        "T": "2023-09-29 19:22:26",
        "Q": "Como le hago para poner en streamlit un campo con los botones y que luego desaparezca",
        "A": "Para crear un campo con botones en Streamlit y que desaparezca después de ser presionado, puedes hacer lo siguiente:\n\n1. Primero, crea un botón usando la función `st.button()`. Esta función creará un botón que se verá así:\n\n```\nif st.button('Presiona aquí'):\n    # Código que se ejecutará cuando se presione el botón\n```\n\n2. Después, puedes envolver el código que quieres que desaparezca después de que se presione el botón dentro de un condicional que verifique si el botón ha sido presionado. Si el botón ha sido presionado, el código no se ejecutará:\n\n```\nif st.button('Presiona aquí'):\n    # Código que se ejecutará cuando se presione el botón\n    st.write('¡Hola! Este código solo se ejecutará después de que se presione el botón.')\n```\n\n3. Para hacer que el campo que contiene el botón desaparezca después de que se presione, puedes usar la función `st.empty()` para crear un campo vacío y luego asignarle el valor `None` después de que se presione el botón:\n\n```\ncampo_con_botones = st.empty()\nif campo_con_botones.button('Presiona aquí'):\n    # Código que se ejecutará cuando se presione el botón\n    st.write('¡Hola! Este código solo se ejecutará después de que se presione el botón.')\n    campo_con_botones = None\n```\n\nDe esta manera, el campo que contiene el botón se convertirá en `None` después de que se presione y desaparecerá de la pantalla."
    },
    "22": {
        "T": "2023-09-29 19:23:15",
        "Q": "y como le hago para que eso ocurra después de una respuesta?",
        "A": "Para hacer que el campo con botones desaparezca después de que se dé una respuesta, puedes usar la función `st.write()` para mostrar la respuesta y luego asignar el valor `None` al campo con botones. Aquí te muestro un ejemplo:\n\n```\ncampo_con_botones = st.empty()\n\n# Preguntar al usuario\nrespuesta = st.text_input('¿Cuál es tu nombre?')\n\n# Verificar si se dio una respuesta\nif respuesta:\n    # Mostrar la respuesta\n    st.write(f'Tu nombre es {respuesta}')\n    \n    # Asignar None al campo con botones para que desaparezca\n    campo_con_botones = None\nelse:\n    # Mostrar el botón si no se ha dado una respuesta\n    if campo_con_botones.button('Presiona aquí'):\n        # Código que se ejecutará cuando se presione el botón\n        st.write('¡Hola! Este código solo se ejecutará después de que se presione el botón.')\n        campo_con_botones = None\n```\n\nEn este ejemplo, primero creamos un campo con botones vacío usando la función `st.empty()`. Luego, preguntamos al usuario su nombre usando la función `st.text_input()`. Si el usuario da una respuesta, mostramos la respuesta usando la función `st.write()` y asignamos `None` al campo con botones para que desaparezca. Si el usuario no da una respuesta, mostramos el botón usando la función `st.button()` dentro de un condicional y asignamos `None` al campo con botones después de que se presione el botón. De esta manera, el campo con botones desaparecerá después de que el usuario dé una respuesta o presione el botón."
    },
    "23": {
        "T": "2023-09-29 19:24:05",
        "Q": "como le hago para evaluar la respuesta en streamlit",
        "A": "Para evaluar la respuesta de un usuario en Streamlit, puedes usar una estructura condicional como `if` para verificar si la respuesta es correcta o no. Aquí te muestro un ejemplo:\n\n```\nrespuesta_correcta = 'manzana'\nrespuesta_usuario = st.text_input('Adivina la respuesta')\n\nif respuesta_usuario.lower() == respuesta_correcta:\n    st.write('¡Correcto!')\nelse:\n    st.write('Incorrecto, intenta de nuevo')\n```\n\nEn este ejemplo, primero definimos la respuesta correcta como una variable llamada `respuesta_correcta`. Luego, usamos la función `st.text_input()` para pedirle al usuario que adivine la respuesta. Después, usamos una estructura condicional `if` para comparar la respuesta del usuario con la respuesta correcta. Si la respuesta es correcta, mostramos un mensaje de \"¡Correcto!\" usando la función `st.write()`. Si la respuesta es incorrecta, mostramos un mensaje de \"Incorrecto, intenta de nuevo\". La función `lower()` se usa para convertir la respuesta del usuario a minúsculas, de modo que la comparación no sea sensible a mayúsculas y minúsculas."
    },
    "24": {
        "T": "2023-09-29 19:24:24",
        "Q": "usando botones de like y dislike",
        "A": "Para crear botones de like y dislike en Streamlit, puedes usar la función `st.button()` para crear dos botones y luego usar una estructura condicional para contar cuántas veces se ha presionado cada botón. Aquí te muestro un ejemplo:\n\n```\n# Contadores de likes y dislikes\nlikes = 0\ndislikes = 0\n\n# Crear los botones\nif st.button('👍'):\n    likes += 1\n\nif st.button('👎'):\n    dislikes += 1\n\n# Mostrar los resultados\nst.write(f'Likes: {likes}')\nst.write(f'Dislikes: {dislikes}')\n```\n\nEn este ejemplo, primero definimos dos contadores de `likes` y `dislikes`. Luego, creamos dos botones usando la función `st.button()`. Cada vez que se presiona un botón, aumentamos el contador correspondiente en 1. Finalmente, mostramos los resultados usando la función `st.write()`. Los botones de like y dislike utilizan emojis para que se vean más atractivos. Puedes cambiar los emojis por cualquier otro que desees."
    },
    "25": {
        "T": "2023-09-29 19:25:01",
        "Q": "como evaluó una respuesta con botones de like y dislike",
        "A": "Para evaluar una respuesta usando botones de like y dislike en Streamlit, puedes asignar un valor numérico a cada botón (por ejemplo, 1 para el botón de like y -1 para el botón de dislike) y luego sumar los valores de todos los botones presionados para obtener una puntuación final. Aquí te muestro un ejemplo:\n\n```\n# Pregunta al usuario\npregunta = '¿Te gusta el helado?'\nrespuesta = st.radio(pregunta, ('Sí', 'No'))\n\n# Asignar valores a las respuestas\nif respuesta == 'Sí':\n    valor_respuesta = 1\nelse:\n    valor_respuesta = -1\n\n# Crear los botones\nif st.button('👍'):\n    valor_botones = 1\nelif st.button('👎'):\n    valor_botones = -1\nelse:\n    valor_botones = 0\n\n# Calcular la puntuación final\npuntuacion = valor_respuesta + valor_botones\n\n# Mostrar el resultado\nst.write(f'Tu puntuación es: {puntuacion}')\n```\n\nEn este ejemplo, primero preguntamos al usuario si le gusta el helado usando la función `st.radio()`. Luego, asignamos un valor numérico a la respuesta del usuario (1 para \"Sí\" y -1 para \"No\"). Después, creamos dos botones de like y dislike usando la función `st.button()`. Si se presiona el botón de like, asignamos el valor 1 a `valor_botones`. Si se presiona el botón de dislike, asignamos el valor -1 a `valor_botones`. Si no se presiona ningún botón, asignamos el valor 0 a `valor_botones`. Finalmente, sumamos los valores de la respuesta del usuario y los botones presionados para obtener una puntuación final. La puntuación final puede ser positiva si al usuario le gusta el helado y presiona el botón de like, o negativa si no le gusta el helado y presiona el botón de dislike."
    },
    "26": {
        "T": "2023-09-29 19:27:31",
        "Q": "Me llamo César Robles",
        "A": "¡Hola César! Es un placer conocerte. ¿En qué puedo ayudarte hoy?"
    },
    "27": {
        "T": "2023-09-29 19:27:51",
        "Q": "Quiero saber cuantos planetas hay en el sistema solar?",
        "A": "¡Claro! En el sistema solar hay ocho planetas: Mercurio, Venus, Tierra, Marte, Júpiter, Saturno, Urano y Neptuno. Además, también hay cinco planetas enanos reconocidos por la Unión Astronómica Internacional: Plutón, Ceres, Haumea, Makemake y Eris."
    },
    "28": {
        "T": "2023-09-29 19:28:11",
        "Q": "en donde se venden terrenos para comprar?",
        "A": "Los terrenos se pueden comprar en diferentes lugares, dependiendo de la zona geográfica en la que te encuentres y del tipo de terreno que estés buscando. Algunas opciones comunes son:\n\n- Agencias inmobiliarias: Las agencias inmobiliarias pueden tener una amplia variedad de terrenos en venta en diferentes zonas, y pueden ayudarte a encontrar uno que se ajuste a tus necesidades y presupuesto.\n\n- Anuncios clasificados: Puedes buscar anuncios clasificados en periódicos o en línea para encontrar terrenos en venta en la zona que te interese.\n\n- Subastas: Algunas subastas de bienes raíces pueden incluir terrenos en venta a precios competitivos.\n\n- Contactar directamente a los propietarios: Si conoces la zona en la que te gustaría comprar un terreno, puedes intentar contactar directamente a los propietarios para ver si están interesados en vender.\n\nRecuerda que siempre es importante verificar la legalidad de la propiedad y asegurarte de que cumple con los requisitos necesarios antes de realizar una compra."
    },
    "29": {
        "T": "2023-09-29 19:28:23",
        "Q": "en que planeta?",
        "A": "Perdón, mi respuesta anterior no especificó en qué planeta se pueden comprar terrenos. En realidad, en ninguno de los planetas del sistema solar se pueden comprar terrenos, ya que no hay ninguna entidad legal que tenga autoridad sobre ellos. Sin embargo, en algunos países, como Estados Unidos, se pueden comprar terrenos en la Luna o en Marte a través de empresas que ofrecen este tipo de servicios. Sin embargo, es importante tener en cuenta que estas compras no tienen validez legal y no están reconocidas por la comunidad internacional."
    },
    "30": {
        "T": "2023-09-29 19:28:52",
        "Q": "A quien le pertenece el sol?",
        "A": "El Sol es una estrella que pertenece al universo y no tiene dueño. Es una entidad natural que no puede ser propiedad de ninguna persona, organización o país. El Sol es una fuente de energía vital para la vida en la Tierra y es objeto de estudio e investigación por parte de la comunidad científica. Sin embargo, el uso de la energía solar que llega a la Tierra puede ser aprovechado por las personas y las empresas a través de tecnologías como los paneles solares, siempre y cuando se respeten las leyes y regulaciones correspondientes."
    },
    "31": {
        "T": "2023-09-29 19:29:01",
        "Q": "Como me llamo?",
        "A": "Tu nombre es César Robles, según lo que mencionaste anteriormente. ¿En qué más puedo ayudarte hoy, César?"
    },
    "32": {
        "T": "2023-09-29 19:29:09",
        "Q": "adios",
        "A": "¡Hasta pronto, César! Si necesitas ayuda en el futuro, no dudes en preguntar. ¡Que tengas un buen día!"
    },
    "33": {
        "T": "2023-09-29 19:31:14",
        "Q": "Hola de nuevo, te acuerdas de mi",
        "A": "¡Hola de nuevo! Por supuesto que me acuerdo de ti, César. ¿En qué puedo ayudarte hoy?"
    },
    "34": {
        "T": "2023-09-29 19:31:39",
        "Q": "Dame una rutina de ejercicios para aprender a escribir en script",
        "A": "Lamentablemente, como asistente virtual, no tengo la capacidad de proporcionar una rutina de ejercicios para aprender a escribir en script. Sin embargo, puedo sugerirte algunos recursos en línea que pueden ayudarte a mejorar tu escritura en script:\n\n- Páginas web de tutoriales: Hay muchas páginas web que ofrecen tutoriales y ejercicios para aprender a escribir en script. Algunas opciones son Calligraphy Skills, IAMPETH y The Postman's Knock.\n\n- Videos de YouTube: En YouTube puedes encontrar muchos videos instructivos que te muestran cómo escribir en script y te dan consejos para mejorar tu técnica.\n\n- Libros de caligrafía: Los libros de caligrafía pueden ser una excelente fuente de información y ejercicios para mejorar tu escritura en script. Algunos libros populares son \"The Art of Calligraphy\" de David Harris y \"Mastering Copperplate Calligraphy\" de Eleanor Winters.\n\nRecuerda que la práctica es la clave para mejorar en cualquier habilidad, así que dedica tiempo a practicar regularmente y pronto verás mejoras en tu escritura en script."
    },
    "35": {
        "T": "2023-09-29 19:31:44",
        "Q": ":(",
        "A": "Lamento no haber podido proporcionarte una rutina de ejercicios para escribir en script. Si tienes alguna otra pregunta o necesitas ayuda en algo más, no dudes en preguntar. Estoy aquí para ayudarte en lo que necesites."
    }
}